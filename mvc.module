<?php

/**
* @author Carl McDade
* @copyright Copyright (c) 2010, Carl McDade
* @since 2010-02-19
* @version 0.2
* @license http://opensource.org/licenses/gpl-license.php GNU Public License
* @link http://www.drupal.se Drupal Sweden
*/

/**
 *
 * Define some constants and globals that can be easily changed. Done here because there maybe multiple modules.
 * taking care of different application sets. Start bootstrapping here.
 *
 * @todo create a more structured bootstrap file that can be used in other
 * situations
 * 
 */

define('APP_TRIGGER', 'app');
define('APP_PATH', drupal_get_path('module', 'mvc'));
define('INI_FILENAME', $_SERVER['DOCUMENT_ROOT'] . base_path() . drupal_get_path('module', 'mvc') . "/_configuration/mvc.ini");



/*
 * These global variables are necessary to carry values to the Classes nested
 * in the module functions.
 *
 * @todo Module_list and hook_list should come from a configuration data source
 * loaded by a Singleton Class
 *
 */


/**
 *
 * Each call to a function from a path is exchanged through a single Class loader
 * that loads the Class file and calls the Class methods. In most cases the called
 * Class is a controller
 *
 * path and file arguments are not used here because we want to use a single dynamic
 * file and class loader
 *
 * formatting only allows page activation under prefixed [app_trigger]/[controller]/[action]
 *
 * access is always open with the access callback set to true. Access control is
 * left to mvc_access().
 *
 */



function mvc_menu()
{
	$items[ 'mvc' ] = array(
        'page callback' => 'mvc_documentation',
        'title' => 'MVC Documentation',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'weight' => -1

    );
    
    $items[ 'mvc/demos' ] = array(
        'page callback' => 'mvc_demos',
        'title' => 'Demos',
        'access callback' => TRUE,
        'page arguments' => array(1, 2),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 0

    );
    
    $items[ APP_TRIGGER . '/%/%' ] = array(
        'page callback' => 'mvc_controller',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,

    );

    return $items;

}

function mvc_help()
{
	//
}

function mvc_documentation()
{
	//
	print theme('page','documentation and instruction pages');
	
}

function mvc_demos()
{
	//Get the HTML/XML files
	
	$demo_links = array(
			array(
				'title' => 'Example 1', 
				'description' => 'An example of chaining links together.', 
				'link' => l('link','app/ConClass1/action_one')),
			array(
				'title' => 'Example 2', 
				'description' => 'Theming example using the movico system.', 
				'link' => l('link','app/ConClass2/hello')),
			array(
				'title' => 'Example 3', 
				'description' => '', 
				'link' => l('link', 'app/ConClass3/hello')),
			array(
				'title' => 'Example 4', 
				'description' => '', 
				'link' => l('link', 'app/ConClass4/hello')),
		);
	
	$output = '<ul>';
	foreach($demo_links as $demo)
	{
		foreach($demo as $row)
		{
			$output .= '<li>' . $row . '</li>';
		}
	}
	$output .= '</ul>';
	print theme('page', $output);
	
}

/**
 * =================================== CONTROLLER ===============================
 * @author Carl McDade
 * @since 2010-02-14
 * Start the contoller class using the autoloader function. The arguments are the Class name and method
 * sent from the routing system. Controllers are contained in a function that sees Drupal and makes Drupal
 * functions available to the Class.
 *
 * @todo Test the use of reflection API to aviod instantating the Class and to get more information on arguments
 * needed for the method rather than forcing them to conform to the URI input.
 * 
 */

function __autoload($class)
{
    $path = APP_PATH . '/_controllers/' . $class . '.class.inc';
    
    if(!file_exists($path))
    {
        drupal_not_found();
        return;

    }
    
    require_once $path;


}

function mvc_controller()
{

	$class =  strtolower(arg(1));
    $action =  strtolower(arg(2));
    
    
    
    // internal admin url
    if(arg(1) == 'admin')
    {
    	$class = strtolower(arg(2)) . '_admin';
    	$action = strtolower(arg(3));
    }
    
    // drupal admin url   
    if(arg(0) == 'admin')
    {
    	$class = strtolower(arg(1)) . '_admin';
    	
    	// default to the index method of the class when a method is not found
    	if(arg(2) == '')
    	{
    		$action = 'index';
    	}
    	else
    	{
    		$action = strtolower(arg(2));
    	}
    }
    
    // override uri if func_arg used
    
    $args = func_get_args();
    
    if(!empty($args) && arg(0) != APP_MODULE)
    {
    	//
    	$class =  strtolower($args[1]);
    	$action =  strtolower($args[2]);
    }
    
    
    $controller = new $class();
    
    if(method_exists($controller, $action))
    {
    	return $controller->$action($args); // send string of arguments
    }
    else
    {
    	return drupal_not_found();
    }

}




/**
 * ==================================== MODEL ===================================
 * @author Carl McDade
 * @since 2010-02-14
 * Start the class loader function. The arguments are the Class name
 *
 * Add any database routines here and load the results into variables. Complicated
 * solutions should be placed in a model file
 *
 * Add any business logic here and load the results to variables. Complicated
 * solutions should be placed in a model file
 * 
 */


function mvc_model( $model, $mode, $parameter = NULL )
{

    if($model)
    {
        $path = APP_PATH . '/_models' . '/' . $model . '.model.inc';
        if(file_exists($path))
        {
            // models can return output if necessary preferably an array
            $output = require_once($path);
        }
        else
        {
            trigger_error("Could not load model '{$model}' from file '{$model}.model.inc'", E_USER_WARNING);
            return false;
        }

    }

    $data = new $model;
    return $data->$mode($parameter);
}


/**
 * ===================================== VIEW ===================================
 * @author Carl McDade
 * @since 2010-02-14
 * This is where the views are registered to Drupals system. Using the hook_theme
 * function a template is choosen from the _view directory.Be careful not to use
 * the same template twice ie. both as parent and child template in the mvc_view().
 * @TODO fix it so that duplicates cannot happen
 * 
 */


function mvc_view($view, $variables = NULL, $output = NULL)
{

    $path = APP_PATH . '/_views' . '/' . $view . '.tpl.php';

    if (file_exists($path) == false)
    {
        trigger_error("Template {$view} not found in ". $path);
        return false;
    }

    if(is_array($variables))
    {

        // Load variables here because they become part of the module not the theme template.php file.
        foreach ($variables as $key => $value)
        {
            $$key = $value;
        }

        // pre-load the child template output with variables
        $output .= theme_render_template($path, $variables);
    }

    // output everything into a parent template. Drupals theme system page is the default
    print theme('page', $output);

}

/**
 * the Drupal access control is built into the menu system. This is statically cached, impossible to
 * turn off and creates a performance hit if rebuilt on every page load. I want to use a more dynamic method
 * So we need a simple access control function to handle URI action calls.
 *
 * @TODO Move the internals of mvc_access() to a _helper Class and add functionality
 * for password authentication and URI wildcards.
 * 
 */

 // this function uses Drupals internals to set the acl in the database so that it can be accessed later
 // by the mvc_access() function.
 
function mvc_perm()
{
    return array('access foo', 'access baz');
}

function mvc_access($uri)
{

    /**
     * @todo Update INI file methods to handle sections and add these to INI file
     *
     * the array of permission actually have to exists in the hook_perm fuction used by Drupal
     * the reason I do this here is to enforce the controller/action convention
     *
     */
    
    $authorize = array(
        'ConClass5/hello' => array('access foo'),
        'ConClass5/hello_log' => array('access baz'),
        'ConClass5/hello_log_view' => array('access foo','access baz'),
        'ConClass4/test_me' => array('access foo','access baz'),
    );

    /*
     * Default all non-listed
     */

    $open = array_keys($authorize);
    if(!in_array($uri, $open))
    {
        return TRUE;
    }

    foreach($authorize as $key => $value)
    {
        if($key == $uri)
        {
            $keys = $value;
            break;
        }
    }


    global $user;
    static $perm = array();

    if ($reset) {
        $perm = array();
    }

    if (!isset($account))
    {
        $account = $user;
    }


    // To reduce the number of SQL queries, we buffer the user's permissions
    // in a static variable.
    if (!isset($perm[$account->uid]))
    {
        $perms = array();
        $result = db_query("SELECT p.perm FROM {role} r INNER JOIN {permission} p ON p.rid = r.rid WHERE r.rid IN (". db_placeholders($account->roles) .")", array_keys($account->roles));

        while ($row = db_fetch_object($result))
        {
            $perms += explode(', ', $row->perm);
        }

    }

    $result = array_intersect($perms, $keys);

    if(count($result) > 0)
    {
        return TRUE;
    }

    return FALSE;

}



?>